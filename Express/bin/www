#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('thirdexpress:server');
var http = require('http');
var https = require('https');
var path = require('path');
var config = require('../config/config')
var fs = require('fs');
if (config.USE_HTTPS) {
    let url = path.resolve(__dirname, "../https")
    console.log(url)

    const httpsOption = {
        // key: fs.readFileSync(config.HTTPS_KEY_PATH),
        // cert: fs.readFileSync(config.HTTPS_PEM_PATH)
        key: fs.readFileSync(path.resolve(url, "1540809615615.key")),
        cert: fs.readFileSync(path.resolve(url, "1540809615615.pem"))

    }
    var server = https.createServer(httpsOption, app).listen(443);
    server.on('error', onError);
    server.on('listening', onListening);
}


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort("80");
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
var io = require('socket.io')(server);
io.sockets.on('connection', function (socket) {
    socket.on('login', function (data) {
        // console.log(data);
        let result = JSON.parse(data);
        io.sockets.emit("tip", JSON.stringify(result))
    });
    socket.on('disconnect', function (socket) {
        console.log("hide")
    });
    socket.on('send', function (data) {
        let result = JSON.parse(data);
        io.sockets.emit("msg", JSON.stringify(result))
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
